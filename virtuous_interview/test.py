# AUTOGENERATED! DO NOT EDIT! File to edit: ../04_Test.ipynb.

# %% auto 0
__all__ = ['final_contacts', 'final_contact_methods', 'final_gifts', 'missing_no_required_fields', 'email_is_valid',
           'number_is_valid', 'zip_is_valid', 'test_contacts_columns', 'test_gifts_columns',
           'test_contact_method_columns', 'test_contact_required_fields', 'test_contacts_contact_type',
           'test_contact_email', 'test_contact_phone_number_valid', 'test_contact_valid_zip', 'test_contact_deceased',
           'test_gift_required_fields', 'test_gift_type', 'test_gift_amount_is_float', 'test_credit_card_type',
           'test_gift_pledge_id', 'test_contact_method_required_fields', 'test_contact_method_type']

# %% ../04_Test.ipynb 2
import pandas as pd
import re
from .utils import valid_email, validate_us_phone_number
from .solution_pd import postal_code_pattern
from nbdev.showdoc import *

# %% ../04_Test.ipynb 3
final_contacts = pd.read_csv('data/final_contacts.csv').fillna('')
final_contact_methods = pd.read_csv('data/final_contact_methods.csv').fillna('')
final_gifts = pd.read_csv('data/final_gifts.csv').fillna('')

# %% ../04_Test.ipynb 5
def missing_no_required_fields(df: pd.DataFrame, columns: list):
    """Validate that no required fields are missing in the dataframe"""
    for column in columns:
        assert ~(df[column] == '').any(), f"Missing values found in column '{column}'"


# %% ../04_Test.ipynb 7
def email_is_valid(s):
    """Validates an email address."""
    if s == '':
        return True
    return valid_email(s)

# %% ../04_Test.ipynb 9
def number_is_valid(s):
    """Validates a US phone number."""
    if s == '':
        return True
    elif validate_us_phone_number(s) == '':
        return False
    else:
        return True

# %% ../04_Test.ipynb 11
def zip_is_valid(p):
    """Validates a postal code."""
    s = str(p).replace('.0', '')
    if s == '':
        return True
    else:
        return bool(re.match(postal_code_pattern, s))

# %% ../04_Test.ipynb 15
def test_contacts_columns():
    """Test that the final_contacts dataframe has the correct columns."""
    assert final_contacts.columns.tolist() == [
    'LegacyContactId', 'LegacyIndividualId', 'ContactType', 'ContactName',
    'FirstName', 
    'LastName', 'SecondaryLegacyIndividualId', 'SecondaryFirstName',
    'SecondaryLastName', 'HomePhone', 'HomeEmail', 'Address1', 
    'City', 'State', 'PostalCode', 'IsPrivate', 'IsDeceased',
    ]

# %% ../04_Test.ipynb 19
def test_gifts_columns():
    """Validate the columns of the final gifts dataframe"""
    assert final_gifts.columns.tolist() == ['LegacyContactId', 'LegacyGiftId', 'GiftType', 'GiftDate',
           'GiftAmount', 'Notes', 'CreditCardType', 'Project1Code',
           'Project2Code', 'LegacyPledgeID']

# %% ../04_Test.ipynb 23
def test_contact_method_columns():
    """Validate the columns of the final_contact_methods dataframe"""
    assert final_contact_methods.columns.tolist() == ['LegacyContactId', 'Type', 'Value']

# %% ../04_Test.ipynb 28
def test_contact_required_fields():
    """Validate that all required fields are present in the final_contacts dataframe."""
    missing_no_required_fields(final_contacts, ['LegacyContactId', 'LegacyIndividualId', 'ContactType', 'FirstName', 'LastName'])

# %% ../04_Test.ipynb 32
def test_contacts_contact_type():
    """Validates that the ContactType column only contains the values 'Household' and 'Organization'"""
    assert final_contacts.ContactType.isin(['Household', 'Organization']).all()

# %% ../04_Test.ipynb 36
def test_contact_email():
    """Validates that all emails are valid"""
    assert final_contacts.HomeEmail.apply(email_is_valid).all()

# %% ../04_Test.ipynb 40
def test_contact_phone_number_valid():
    """Validate that all phone numbers are valid"""
    assert final_contacts.HomePhone.apply(number_is_valid).all()

# %% ../04_Test.ipynb 44
def test_contact_valid_zip():
    """Validates that all contacts have a valid zip code"""
    assert final_contacts.PostalCode.apply(zip_is_valid).all()

# %% ../04_Test.ipynb 48
def test_contact_deceased():
    """Validate that all contacts are either deceased or not deceased."""
    assert final_contacts.IsDeceased.isin([True, False]).all()

# %% ../04_Test.ipynb 53
def test_gift_required_fields():
    """Validate that all required fields are present in the gift data."""
    missing_no_required_fields(final_gifts, ['LegacyContactId', 'LegacyGiftId', 'GiftType', 'GiftDate', 'GiftAmount', 'LegacyPledgeID'])

# %% ../04_Test.ipynb 57
def test_gift_type():
    """Test that all gift types are valid"""
    assert final_gifts.GiftType.isin(['Cash', 'Check', 'Credit', 'Other',  'Reversing Transaction']).all()

# %% ../04_Test.ipynb 61
def test_gift_amount_is_float():
    """Test that the GiftAmount column is a float"""
    assert final_gifts['GiftAmount'].dtype == 'float64'

# %% ../04_Test.ipynb 65
def test_credit_card_type():
    """Test that all credit card types are valid."""
    assert final_gifts.CreditCardType.isin(['Visa', 'Mastercard', 'AMEX', 'Discover', '']).all()

# %% ../04_Test.ipynb 69
def test_gift_pledge_id():
    """Test that the number of gifts is equal to the number of unique pledge IDs"""
    assert len(final_gifts) == len(final_gifts.LegacyPledgeID.unique())

# %% ../04_Test.ipynb 74
def test_contact_method_required_fields():
    
    missing_no_required_fields(final_contact_methods, ['LegacyContactId', 'Type', 'Value'])

# %% ../04_Test.ipynb 78
def test_contact_method_type():
    """Test that all contact methods are one of the three types"""
    assert final_contact_methods.Type.isin(['HomePhone', 'HomeEmail', 'Fax']).all()
